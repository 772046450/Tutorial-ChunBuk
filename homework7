#include<stdio.h>
#include<stdlib.h>


typedef struct Node {
	int key;
	struct Node* llink;
	struct Node* rlink;
} listNode;



typedef struct Head {
	struct Node* first;
}headNode;






int insertLast(headNode* h, int key);
int insertFirst(headNode* h, int key);
int deleteNode(headNode* h, int key);
int deleteLast(headNode* h);
int deleteFirst(headNode* h);
int invertList(headNode* h);

void printList(headNode* h);


int main()
{
	char command;
	int key;
	headNode* headnode=NULL;

	do{
		printf("----------------------------------------------------------------\n");
		printf("                     Doubly Linked  List                        \n");
		printf("----------------------------------------------------------------\n");
		printf(" Initialize    = z           Print         = p \n");
		printf(" Insert Node   = i           Delete Node   = d \n");
		printf(" Insert Last   = n           Delete Last   = e\n");
		printf(" Insert First  = f           Delete First  = t\n");
		printf(" Invert List   = r           Quit          = q\n");
		printf("----------------------------------------------------------------\n");

		printf("Command = \n");
        printf("[----- [MAGUOHAO] [2020039090] -----]" );
		scanf(" %c", &command);

		switch(command) {
		case 'z': case 'Z':
			initialize(&headnode);
			break;
		case 'p': case 'P':
			printList(headnode);
			break;
		case 'i': case 'I':
			printf("Your Key = ");
			scanf("%d", &key);
			insertNode(headnode, key);
			break;
		case 'd': case 'D':
			printf("Your Key = ");
			scanf("%d", &key);
			deleteNode(headnode, key);
			break;
		case 'n': case 'N':
			printf("Your Key = ");
			scanf("%d", &key);
			insertLast(headnode, key);
			break;
		case 'e': case 'E':
			deleteLast(headnode);
			break;
		case 'f': case 'F':
			printf("Your Key = ");
			scanf("%d", &key);
			insertFirst(headnode, key);
			break;
		case 't': case 'T':
			deleteFirst(headnode);
			break;
		case 'r': case 'R':
			invertList(headnode);
			break;
		case 'q': case 'Q':
			freeList(headnode);
			break;
		default:
			printf("\n       >>>>>   Concentration!!   <<<<<     \n");
			break;
		}

	}while(command != 'q' && command != 'Q');

	return 1;
}


/* Initializes the linked list */
int initialize(headNode** h) {
    /* Check whether the linked list is initialized */
    if (*h != NULL) {
        printf("Error: The list is already initialized.\n");
        return 0;
    }

    /* Creates the header */
    *h = (headNode*)malloc(sizeof(headNode));
    (*h)->first = NULL;

    printf("The list has been initialized.\n");
    return 1;
}

/* Releases memory used by the linked list */
int freeList(headNode* h) {
   /* If the list is empty, there is no memory to free */
    if (h == NULL || h->first == NULL) {
        printf("The list is already empty.\n");
        return 0;
    }

    /* Releases each node */
    listNode* p = h->first;
    while (p != NULL) {
        h->first = p->rlink;
        free(p);
        p = h->first;
    }

    /* Releases the header */
    free(h);

    printf("The list has been freed.\n");
    return 1;
}


void printList(headNode* h) {
	int i = 0;
	listNode* p;

	printf("\n---PRINT\n");

	if(h == NULL) {
		printf("Nothing to print....\n");
		return;
	}

	p = h->first;

	while(p != NULL) {
		printf("[ [%d]=%d ] ", i, p->key);
		p = p->rlink;
		i++;
	}

	printf("  items = %d\n", i);
}





int insertLast(headNode* h, int key) {

	return 0;
}




int deleteLast(headNode* h) {


	return 0;
}




int insertFirst(headNode* h, int key) {
	return 0;
}


int deleteFirst(headNode* h) {

	return 0;
}




int invertList(headNode* h) {

	return 0;
}


/* Inserts a node in the linked list (in order) */
int insertNode(headNode* h, int key) {
   /* Creates a new node */
    listNode* newNode = (listNode*)malloc(sizeof(listNode));
    newNode->key = key;

    /* Check whether the linked list is empty */
    if (h->first == NULL) {
        newNode->llink = NULL;
        newNode->rlink = NULL;
        h->first = newNode;
        printf("The node with key %d has been inserted as the first node.\n", key);
        return 1;
    }

    /* Insert nodes in sequence*/
    listNode* p = h->first;
    while (p != NULL) {
        /*If the key of the new node is less than or equal to the key of the current node, the new node is inserted */
        if (key <= p->key) {
            newNode->rlink = p;
            newNode->llink = p->llink;
            p->llink = newNode;

            /* If the first node is inserted, the header node is updated */
            if (newNode->llink == NULL) {
                h->first = newNode;
            }
            else {
                newNode->llink->rlink = newNode;
            }

            printf("The node with key %d has been inserted.\n", key);
            return 1;
        }

        p = p->rlink;
    }

    /* If the key of the new node is greater than the key of all nodes, it is inserted as the last node */
    newNode->rlink = NULL;
    newNode->llink = p->llink;
    p->rlink = newNode;

    printf("The node with key %d has been inserted as the last node.\n", key);
    
    return 1;
}



int deleteNode(headNode* h, int key) {

	return 1;
}
